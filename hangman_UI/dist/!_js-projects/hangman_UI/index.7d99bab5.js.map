{"mappings":"AAAA,2BAA2B;AAC3B,MAAM,QAAQ;IAAC;IAAO;IAAQ;IAAO;IAAQ;IAAO;IAAU;CAAS;AACvE,IAAI,eAAe,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM,MAAM,EAAE;AAClE,QAAQ,GAAG,CAAC;AACZ,MAAM,iBAA2B,EAAE;AACnC,MAAM,eAAyB,EAAE;AACjC,IAAI,gBAAgB;AACpB,IAAI,WAAW;AACf,MAAM,mBAAmB,aAAa,MAAM;AAE5C,0BAA0B;AAC1B,MAAM,SAAS,SAAS,aAAa,CAAC;AAEtC,MAAM,iBAAiB,SAAS,aAAa,CAAC;AAC9C,MAAM,YAAY,SAAS,aAAa,CAAC;AAEzC,+BAA+B;AAC/B,MAAM,cAAc;IAClB,IAAI,QACF,OAAO,SAAS,GAAG,CAAC;MAClB,EAAE,aACC,KAAK,CAAC,IACN,GAAG,CACF,CAAC,SAAW,CAAC;;cAET,EAAE,eAAe,QAAQ,CAAC,UAAU,OAAO,WAAW,KAAK,GAAG;;UAElE,CAAC,EAEF,IAAI,CAAC,IAAI;IACd,CAAC;IAGH,IAAI,YAAoB;IAExB,IAAI,QACF,YAAY,OAAO,SAAS,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC;IAGhD,IAAI,WACF;QAAA,IAAI,UAAU,WAAW,OAAO,aAAa,WAAW,IAAI;YAC1D,UAAU,SAAS,GAAG;YACtB,UAAU,SAAS,CAAC,GAAG,CAAC;YACxB,WAAW;QACb;IAAA;AAEJ;AAEA,MAAM,uBAAuB;IAC3B,IAAI,gBACF,eAAe,SAAS,GAAG,CAAC;MAC1B,EAAE,aAAa,MAAM,GAAG,IAAI,2BAA2B,GAAG;MAC1D,EAAE,aAAa,GAAG,CAAC,CAAC,SAAW,CAAC,MAAM,EAAE,OAAO,WAAW,GAAG,OAAO,CAAC,EAAE;IACzE,CAAC;AAEL;AAEA,oCAAoC;AAEpC,OAAO,gBAAgB,CAAC,WAAW,CAAC;IAClC,IAAI,WACF;QAAA,IAAI,kBAAkB,kBAAkB;YACtC,UAAU,SAAS,GAAG;YACtB,UAAU,SAAS,CAAC,GAAG,CAAC;YACxB,WAAW;QACb;IAAA;IAGF,IAAI,CAAC,UAAU;QACb,MAAM,SAAS,EAAE,GAAG;QAEpB,IAAI,aAAa,IAAI,CAAC;YACpB,IAAI,aAAa,QAAQ,CAAC,SAAS;gBACjC,IAAI,CAAC,eAAe,QAAQ,CAAC,SAAS;oBACpC,eAAe,IAAI,CAAC;oBAEpB;gBACF,OACE,IAAI,WAAW;oBACb,UAAU,SAAS,GAAG,CAAC,EAAE,OAAO,WAAW,GAAG,eAAe,CAAC;oBAC9D,UAAU,SAAS,CAAC,GAAG,CAAC;oBAExB,WAAW;wBACT,UAAU,SAAS,GAAG;wBACtB,UAAU,SAAS,CAAC,MAAM,CAAC;oBAC7B,GAAG;gBACL;YAEJ,OAAO;gBACL,IAAI,CAAC,aAAa,QAAQ,CAAC,SAAS;oBAClC,aAAa,IAAI,CAAC;oBAClB,iBAAiB;oBACjB;gBACF,OACE,IAAI,WAAW;oBACb,UAAU,SAAS,GAAG,CAAC,EAAE,OAAO,WAAW,GAAG,eAAe,CAAC;oBAC9D,UAAU,SAAS,CAAC,GAAG,CAAC;oBAExB,WAAW;wBACT,UAAU,SAAS,GAAG;wBACtB,UAAU,SAAS,CAAC,MAAM,CAAC;oBAC7B,GAAG;gBACL;YAEJ;eAEA,IAAI,WAAW;YACb,UAAU,SAAS,GAAG,CAAC,EAAE,OAAO,WAAW,GAAG,mBAAmB,CAAC;YAClE,UAAU,SAAS,CAAC,GAAG,CAAC;YAExB,WAAW;gBACT,UAAU,SAAS,GAAG;gBACtB,UAAU,SAAS,CAAC,MAAM,CAAC;YAC7B,GAAG;QACL;IAEJ;AACF;AAEA","sources":["script.ts"],"sourcesContent":["//* ------ Model ------- //\nconst words = ['leg', 'foot', 'arm', 'hand', 'toe', 'finger', 'tongue'];\nlet selectedWord = words[Math.floor(Math.random() * words.length)];\nconsole.log(selectedWord);\nconst correctLetters: string[] = [];\nconst wrongLetters: string[] = [];\nlet attemptsCount = 0;\nlet gameOver = false;\nconst maxWrongAttempts = selectedWord.length;\n\n//* ------ View ------- //\nconst wordEl = document.querySelector('#word') as HTMLElement;\n\nconst wrongLettersEl = document.querySelector('#wrong-letters') as HTMLElement;\nconst messageEl = document.querySelector('#message') as HTMLElement;\n\n//* ------ Controller ------ //\nconst displayWord = () => {\n  if (wordEl) {\n    wordEl.innerHTML = `\n      ${selectedWord\n        .split('')\n        .map(\n          (letter) => `\n            <span class=\"letter\">\n              ${correctLetters.includes(letter) ? letter.toUpperCase() : ''}\n            </span>\n          `\n        )\n        .join('')}\n    `;\n  }\n\n  let innerWord: string = '';\n\n  if (wordEl) {\n    innerWord = wordEl.innerText.split('\\n').join('');\n  }\n\n  if (messageEl) {\n    if (innerWord.toUpperCase() === selectedWord.toUpperCase()) {\n      messageEl.innerText = 'You won! ðŸ˜ˆ';\n      messageEl.classList.add('win-color');\n      gameOver = true;\n    }\n  }\n};\n\nconst updateWrongLettersEl = () => {\n  if (wrongLettersEl) {\n    wrongLettersEl.innerHTML = `\n      ${wrongLetters.length > 0 ? '<p> Wrong Letters:</p>' : ''}\n      ${wrongLetters.map((letter) => `<span>${letter.toUpperCase()}</span>`)}\n    `;\n  }\n};\n\n//* ------ Game starts here ----- //\n\nwindow.addEventListener('keydown', (e) => {\n  if (messageEl) {\n    if (attemptsCount === maxWrongAttempts) {\n      messageEl.innerText = 'You lost ðŸ¤¡';\n      messageEl.classList.add('lose-color');\n      gameOver = true;\n    }\n  }\n\n  if (!gameOver) {\n    const letter = e.key;\n\n    if (/^[a-zA-Z]$/.test(letter)) {\n      if (selectedWord.includes(letter)) {\n        if (!correctLetters.includes(letter)) {\n          correctLetters.push(letter);\n\n          displayWord();\n        } else {\n          if (messageEl) {\n            messageEl.innerText = `${letter.toUpperCase()} - was already!`;\n            messageEl.classList.add('info-color');\n\n            setTimeout(() => {\n              messageEl.innerText = '';\n              messageEl.classList.remove('info-color');\n            }, 2000);\n          }\n        }\n      } else {\n        if (!wrongLetters.includes(letter)) {\n          wrongLetters.push(letter);\n          attemptsCount += 1;\n          updateWrongLettersEl();\n        } else {\n          if (messageEl) {\n            messageEl.innerText = `${letter.toUpperCase()} - was already!`;\n            messageEl.classList.add('info-color');\n\n            setTimeout(() => {\n              messageEl.innerText = '';\n              messageEl.classList.remove('info-color');\n            }, 2000);\n          }\n        }\n      }\n    } else {\n      if (messageEl) {\n        messageEl.innerText = `${letter.toUpperCase()} - is not a letter!`;\n        messageEl.classList.add('info-color');\n\n        setTimeout(() => {\n          messageEl.innerText = '';\n          messageEl.classList.remove('info-color');\n        }, 2000);\n      }\n    }\n  }\n});\n\ndisplayWord();\n"],"names":[],"version":3,"file":"index.7d99bab5.js.map","sourceRoot":"/__parcel_source_root/"}